// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Vite
// plugin that tells the Electron app where to look for the Vite-bundled app code (depending on
// whether you're running in development or production).
declare global {
  const MAIN_WINDOW_VITE_DEV_SERVER_URL: string;
  const MAIN_WINDOW_VITE_NAME: string;
}

import type {
  ChatMessage,
  ExecuteToolResponse,
  MCPServerConfig,
  MCPServerDisplayConfig,
  MCPConfigCatalog,
  SendMessageResponse,
  StartServerResponse,
  StopServerResponse,
  ToolDefinition,
} from "@/types/mcp";

// Preload types
interface ThemeModeContext {
  toggle: () => Promise<boolean>;
  dark: () => Promise<void>;
  light: () => Promise<void>;
  system: () => Promise<boolean>;
  current: () => Promise<"dark" | "light" | "system">;
}

interface ElectronWindow {
  minimize: () => Promise<void>;
  maximize: () => Promise<void>;
  close: () => Promise<void>;
}

interface ElectronAPI {
  openUrl: (url: string) => Promise<void>;
}

interface MCPContext {
  startServer: (config: MCPServerConfig) => Promise<StartServerResponse>;
  stopServer: (name: string) => Promise<StopServerResponse>;
  listTools: (serverName: string) => Promise<ToolDefinition[]>;
  executeTool: (
    serverName: string,
    toolName: string,
    args: Record<string, unknown>,
  ) => Promise<ExecuteToolResponse>;
  sendMessage: (serverName: string, message: string) => Promise<SendMessageResponse>;
  getChatHistory: (serverName: string) => Promise<ChatMessage[]>;
  clearChatHistory: (serverName: string) => Promise<StopServerResponse>;
  getServerConfig: (serverName: string) => Promise<MCPServerConfig | null>;
  overrideServerConfig: (
    serverName: string,
    config: Partial<MCPServerConfig>,
  ) => Promise<{ success: boolean; config?: MCPServerConfig; error?: string }>;
  listCustomServers: () => Promise<MCPServerDisplayConfig[]>;
  saveCustomServers: (
    payload: MCPServerDisplayConfig[] | Record<string, MCPServerDisplayConfig> | MCPConfigCatalog,
  ) => Promise<{ success: boolean; count?: number; error?: string }>;
  deleteCustomServer: (serverName: string) => Promise<{ success: boolean; error?: string }>;
}

declare global {
  interface Window {
    themeMode: ThemeModeContext;
    electronWindow: ElectronWindow;
    electronAPI: ElectronAPI;
    mcp: MCPContext;
  }
}

export {};
